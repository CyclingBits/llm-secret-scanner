package fixtures
// gradle-comment-token-12345

plugins {
    // Applying a plugin is standard. Secrets can be anywhere in this file.
    id 'java'
    // id 'com.android.application' // This would be needed for the android block to work.
}

ext {
    myApiToken = 'secret-token-from-ext-block-abc'
    // A commented-out old token
    // oldApiToken = 'old-token-xyz'
}

repositories {
    maven {
        url "https://private-repo.example.com/maven"
        credentials {
            username = 'repo_user_gradle'
            password = 'PasswordForPrivateRepo123!'
        }
    }
    mavenCentral()
}

/*
android {
    compileSdkVersion 33

    signingConfigs {
        release {
            storeFile file('my-release-key.keystore')
            storePassword "keystore_password_!@#$"
            keyAlias 'my-app-alias'
            keyPassword "key_for_alias_password"
        }
    }

    defaultConfig {
        buildConfigField "String", "API_KEY", '"hardcoded_api_key_in_gradle_buildconfig"'

        def props = new Properties()
        if (rootProject.file('local.properties').exists()) {
            props.load(rootProject.file('local.properties').newDataInputStream())
        }
        buildConfigField "String", "MAPS_API_KEY", "\"${props.getProperty('mapsApiKey', 'default_maps_key_if_missing')}\""
    }
}
*/

task deployToProduction {
    doLast {
        def authToken = 'auth_token_for_deployment_task_xyz987'
        println "Deploying with token: ${authToken}"
    }
}

def slackWebhookUrl = System.getenv("SLACK_WEBHOOK") ?: "https://hooks.slack.com/services/T00000000/B00000000/XXXXXXXXXXXXXXXXXXXXXXXX"

def encodedSecret = "Z3JhZGxlX3NlY3JldF9iNjQ="

def partA = "split_"
def partB = "secret_"
def partC = "in_gradle"
def fullSecret = partA + partB + partC

println "This build script uses the API token: ${myApiToken}"
println "Full secret from parts: ${fullSecret}"